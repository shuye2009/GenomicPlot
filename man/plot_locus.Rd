% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GenomicPlot.R
\name{plot_locus}
\alias{plot_locus}
\title{Plot signal around custom genomic loci}
\usage{
plot_locus(
  queryFiles,
  centerFiles,
  txdb = NULL,
  ext = c(-100, 100),
  hl = c(0, 0),
  shade = TRUE,
  smooth = FALSE,
  handleInputParams = NULL,
  verbose = FALSE,
  binSize = 10,
  refPoint = "center",
  Xlab = "Center",
  Ylab = "Coverage/base/gene",
  inputFiles = NULL,
  stranded = TRUE,
  heatmap = TRUE,
  scale = FALSE,
  outPrefix = NULL,
  rmOutlier = FALSE,
  transform = NA,
  statsMethod = "wilcox.test",
  heatRange = NULL,
  hw = c(8, 8),
  nc = 2
)
}
\arguments{
\item{queryFiles}{a vector of sample file names. The file should be in .bam, .bed, .wig or .bw format, mixture of formats is allowed}

\item{centerFiles}{a named vector of reference file names or genomic features in  c("utr3", "utr5", "cds", "intron", "exon", "transcript", "gene"). The file should be in .bed format only}

\item{txdb}{a TxDb object defined in the GenomicFeatures package. Default NULL, needed only when genomic features are used in the place of centerFiles.}

\item{ext}{a vector of two integers defining upstream and downstream boundaries of the plot window, flanking the reference locus}

\item{hl}{a vector of two integers defining upstream and downstream boundaries of the highlight window, flanking the reference locus}

\item{shade}{logical indicating whether to place a shaded rectangle around the point of interest}

\item{smooth}{logical, indicating whether the line should smoothed with a spline smoothing algorithm}

\item{handleInputParams}{a list of parameters for \code{handle_input}}

\item{verbose}{logical, indicating whether to output additional information (data used for plotting or statistical test results)}

\item{binSize}{an integer defines bin size for intensity calculation}

\item{refPoint}{a string in c("start", "center", "end")}

\item{Xlab}{a string denotes the label on x-axis}

\item{Ylab}{a string for y-axis label}

\item{inputFiles}{a vector of input sample file names. The file should be in .bam, .bed, .wig or .bw format, mixture of formats is allowed}

\item{stranded}{logical, indicating whether the strand of the feature should be considered}

\item{heatmap}{logical, indicating whether a heatmap of the score matrix should be generated}

\item{scale}{logical, indicating whether the score matrix should be scaled to the range 0:1, so that samples with different baseline can be compared}

\item{outPrefix}{a string specifying output file prefix for plots (outPrefix.pdf)}

\item{rmOutlier}{logical, indicating whether a row with abnormally high values in the score matrix should be removed}

\item{transform}{a string in c("log", "log2", "log10"), default = NA indicating no transformation of data matrix}

\item{statsMethod}{a string in c("wilcox.test", "t.test"), for pair-wise group comparisons}

\item{heatRange}{a numerical vector of two elements, defining range for heatmap color ramp generation}

\item{hw}{a vector of two elements specifying the height and width of the output figures}

\item{nc}{integer, number of cores for parallel processing}
}
\value{
a list of two dataframes containing the data used for plotting and for statistical testing
}
\description{
Plot reads or peak Coverage/base/gene of samples in the query files around reference locus (start, end or center of a genomic region)
defined in the centerFiles. The upstream and downstream windows flanking loci can be given separately, a smaller window can be defined to allow
statistical comparisons between samples for the same reference, or between references for a given sample. If Input files are provided, ratio over
Input is computed and displayed as well.
}
\examples{
txdb <- AnnotationDbi::loadDb(system.file("extdata", "txdb_chr19.sql", package="GenomicPlot"))

queryfiles <- system.file("extdata", "treat_chr19.bam", package="GenomicPlot")
names(queryfiles) <- "query"

inputfiles <- system.file("extdata", "input_chr19.bam", package="GenomicPlot")
names(inputfiles) <- "input"

centerfiles <- system.file("extdata", "test_clip_peak_chr19.bed", package="GenomicPlot")
names(centerfiles) <- "clipPeak"

handleInputParams <- list(CLIP_reads=TRUE, fix_width=150, fix_point="start", norm=FALSE, 
useScore=FALSE, outRle=TRUE, useSizeFactor=TRUE, genome="hg19")
 
df <- plot_locus(queryFiles=queryfiles, centerFiles=c(centerfiles, "intron"), txdb=txdb, 
ext=c(-200,200), hl=c(-20, 20), shade=TRUE, smooth=FALSE, handleInputParams=handleInputParams, 
verbose=TRUE, binSize=10, refPoint="center", Xlab="Center", Ylab="Coverage/base/gene", 
inputFiles=inputfiles, stranded=TRUE, heatmap=TRUE, scale=FALSE, outPrefix=NULL, 
rmOutlier=FALSE, transform=NA, statsMethod="wilcox.test", heatRange=c(0, 0.3), nc=2)

}
\author{
Shuye Pu
}
