% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/GenomicPlot.R
\name{plot_start_end_with_random}
\alias{plot_start_end_with_random}
\title{Plot signals around the start and the end of genomic features and random regions}
\usage{
plot_start_end_with_random(
  queryFiles,
  inputFiles = NULL,
  txdb,
  featureName,
  handleInputParams = NULL,
  binSize = 10,
  insert = 0,
  verbose = FALSE,
  longest = TRUE,
  ext = c(-500, 200, -200, 500),
  hl = c(-50, 50, -50, 50),
  randomize = FALSE,
  stranded = TRUE,
  scale = FALSE,
  smooth = FALSE,
  rmOutlier = FALSE,
  outPrefix = "plots",
  transform = NA,
  shade = TRUE,
  nc = 2,
  Ylab = "Signal intensity"
)
}
\arguments{
\item{queryFiles}{a vector of sample file names. The file should be in .bam, .bed, .wig or .bw format, mixture of formats is allowed}

\item{inputFiles}{a vector of input sample file names. The file should be in .bam, .bed, .wig or .bw format, mixture of formats is allowed}

\item{txdb}{a TxDb object defined in the GenomicFeatures package. If featureName is "custom", a bed file that define the feature}

\item{featureName}{one of the gene feature in c("utr3", "utr5", "cds", "intron", "exon", "transcript", "gene") or "custom". Only one feature is allowed.}

\item{handleInputParams}{a list of parameters for \code{handle_input}}

\item{binSize}{an integer defines bin size for intensity calculation}

\item{insert}{an integer specifies the length of the center regions to be included, in addition to the start and end of the feature}

\item{verbose}{logical, whether to output additional information (data used for plotting or statistical test results)}

\item{longest}{logical, indicating whether the output should be limited to the longest transcript of each gene}

\item{ext}{a vector of four integers defining upstream and downstream boundaries of the plot window, flanking the start and end of features}

\item{hl}{a vector of four integers defining upstream and downstream boundaries of the highlight window, flanking the start and end of features}

\item{randomize}{logical, indicating if randomized feature should generated and used as a contrast to the real feature}

\item{stranded}{logical, indicating whether the strand of the feature should be considered}

\item{scale}{logical, indicating whether the score matrix should be scaled to the range 0:1, so that samples with different baseline can be compared}

\item{smooth}{logical, indicating whether the line should smoothed with a spline smoothing algorithm}

\item{rmOutlier}{logical, indicating whether a row with abnormally high values in the score matrix should be removed}

\item{outPrefix}{a string specifying output file prefix for plots (outPrefix.pdf)}

\item{transform}{a string in c("log", "log2", "log10"), default = NA indicating no transformation of data matrix}

\item{shade}{logical indicating whether to place a shaded rectangle around the point of interest}

\item{nc}{integer, number of cores for parallel processing}
}
\value{
a list of two objects, the first is a GRanges object, the second is a GRangesList object
}
\description{
Plot reads or peak signal intensity of samples in the query files around stat, end and center of genomic 
features. The upstream and downstream windows can be given separately. If Input files are provided, ratio over Input is
computed and displayed as well. A random feature can be generated to serve as a background for contrasting.
}
\examples{
txdb <- AnnotationDbi::loadDb(system.file("data", "txdb_chr19.sql", package="GenomicPlotData"))
queryFiles <- system.file("data", "test_clip_chr19.bam", package="GenomicPlotData")
names(queryFiles) <- "query"
inputFiles <- system.file("data", "test_clip_input_chr19.bam", package="GenomicPlotData")
names(inputFiles) <- "input"
ext <- c(-500, 200, -200, 500)
hl <- c(-50, 50, -50, 50)
op <- NULL
handleInputParams <- list(CLIP_reads=FALSE, fix_width=150, fix_point="start", norm=TRUE, useScore=FALSE,
 outRle=TRUE, useSizeFactor=TRUE, genome="hg19")
plot_start_end_feature(queryFiles=c(queryFiles,inputFiles), inputFiles=NULL, txdb=txdb, featureName="intron",
 binSize=10, handleInputParams=handleInputParams, longest=TRUE, ext=ext, hl=hl, randomize=FALSE,
 insert=100, stranded=TRUE, scale=FALSE, smooth=TRUE, outPrefix=op, nc=2)

}
\author{
Shuye Pu
}
